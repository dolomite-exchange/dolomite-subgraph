import { afterAll, beforeAll, clearStore, describe, newMockEvent, test } from 'matchstick-as'
import { Address, BigDecimal, BigInt, Bytes, ethereum } from '@graphprotocol/graph-ts'

import { handleZapExecuted } from '../src/mappings/zap'
import { DolomiteMargin, Transaction } from '../src/types/schema'
import { ZERO_BD, ZERO_BI, ZERO_BYTES } from '../src/mappings/generated/constants'
import { ZapExecuted as ZapExecutedEvent } from '../src/types/Zap/GenericTraderProxy'
import { LogAddMarket as AddMarketEvent } from '../src/types/MarginAdmin/DolomiteMargin'
import { handleMarketAdded } from '../src/mappings/margin-admin'

describe('#handleZapExecuted', () => {
  beforeAll(() => {
    let dolomiteMargin = new DolomiteMargin('0x6bd780e7fdf01d77e4d475c821f1e7ae05409072')
    dolomiteMargin.numberOfMarkets = 16
    dolomiteMargin.liquidationRatio = BigDecimal.fromString('1.15')
    dolomiteMargin.liquidationReward = BigDecimal.fromString('1.05')
    dolomiteMargin.earningsRate = BigDecimal.fromString('0.85')
    dolomiteMargin.minBorrowedValue = ZERO_BD
    dolomiteMargin.maxNumberOfMarketsWithBalancesAndDebt = BigInt.fromI32(32)
    dolomiteMargin.expiryRampTime = BigInt.fromI32(300)
    dolomiteMargin.lastTransactionHash = ZERO_BYTES
    dolomiteMargin.supplyLiquidityUSD = ZERO_BD
    dolomiteMargin.borrowLiquidityUSD = ZERO_BD
    dolomiteMargin.totalBorrowVolumeUSD = ZERO_BD
    dolomiteMargin.totalLiquidationVolumeUSD = ZERO_BD
    dolomiteMargin.totalSupplyVolumeUSD = ZERO_BD
    dolomiteMargin.totalTradeVolumeUSD = ZERO_BD
    dolomiteMargin.totalVaporizationVolumeUSD = ZERO_BD
    dolomiteMargin.totalZapVolumeUSD = ZERO_BD
    dolomiteMargin.userCount = ZERO_BI
    dolomiteMargin.marginPositionCount = ZERO_BI
    dolomiteMargin.borrowPositionCount = ZERO_BI
    dolomiteMargin.actionCount = ZERO_BI
    dolomiteMargin.liquidationCount = ZERO_BI
    dolomiteMargin.tradeCount = ZERO_BI
    dolomiteMargin.transactionCount = ZERO_BI
    dolomiteMargin.vaporizationCount = ZERO_BI
    dolomiteMargin.zapCount = ZERO_BI
    dolomiteMargin.save()
  })

  afterAll(() => {
    clearStore()
  })

  test('handleZapExecuted', () => {
    let transaction = new Transaction('0x705b842db25b9d923f138aa68ce043c00ba1c2e18d7905b1ee8a8b442915952d')
    transaction.blockNumber = BigInt.fromI32(119520858)
    transaction.timestamp = BigInt.fromI32(1691536589) // Tue Aug 08 2023 23:16:29 GMT+0000
    transaction.intermitentAmmMints = []
    transaction.intermitentAmmBurns = []
    transaction.intermitentAmmTrades = []
    transaction.save()

    let addWethEvent = changetype<AddMarketEvent>(newMockEvent())
    addWethEvent.parameters = [
      new ethereum.EventParam('marketId', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(0))),
      new ethereum.EventParam(
        'token',
        ethereum.Value.fromAddress(Address.fromString('0x82aF49447D8a07e3bd95BD0d56f35241523fBab1')),
      ),
    ]
    handleMarketAdded(addWethEvent)

    let addDaiEvent = changetype<AddMarketEvent>(newMockEvent())
    addDaiEvent.parameters = [
      new ethereum.EventParam('marketId', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(1))),
      new ethereum.EventParam(
        'token',
        ethereum.Value.fromAddress(Address.fromString('0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1')),
      ),
    ]
    handleMarketAdded(addDaiEvent)

    let event = changetype<ZapExecutedEvent>(newMockEvent())
    event.transaction = new ethereum.Transaction(
      Bytes.fromHexString(transaction.id),
      BigInt.fromI32(1),
      Address.fromString('0x4a9026e6332b3dcb52e3d4d3ccbdfa3eeb73c23f'),
      Address.fromString('0x3e647e1242a8ce0ce013cb967fbff742d7846242'),
      BigInt.fromI32(0),
      BigInt.fromI32(6716252),
      BigInt.fromI32(100000000),
      Bytes.fromHexString(
        '0xd8319d4712a8dbfad0b6f146706c1b7e22fc68a63f6a9c6ab2cb297a11da2e1e716eebbd00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000018a57a244bb8ff86000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000007600000000000000000000000000000000000000000000000000000000064d2d17800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d991d9e0a22a51391c25b258eef8c1c4a392383a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000044054e3f31b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fea7a6a0b346362bf88a9e4a88416b77a57d6c2a000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000001e686e00000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000360000000000000000000000000d991d9e0a22a51391c25b258eef8c1c4a392383a000000000000000000000000a75c21c5be284122a87a37a76cc6c4dd3e55a1d4010000000000000000000000000000000000000000000000000000000003138800000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000064d3212682251b6c37764ef9a13836373793b46d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000db3fe3b770c95a0b99d1ed6f2627933466c0dd800000000000000000000000000000000000000000000000000000000000000a491695586000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000064d2cf1d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000298a07c4a5b6bc32e1ef37bf5ccb3a17c106224d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
      BigInt.fromI32(2973),
    )
    event.parameters = [
      new ethereum.EventParam(
        'accountOwner',
        ethereum.Value.fromAddress(Address.fromString('0x4a9026e6332b3dcb52e3d4d3ccbdfa3eeb73c23f')),
      ),
      new ethereum.EventParam(
        'accountNumber',
        ethereum.Value.fromUnsignedBigInt(BigInt.fromString(
          '8439979825798392317859609984025624901566901533788091502416655189565600885693')),
      ),
      new ethereum.EventParam('marketIdsPath', ethereum.Value.fromArray([
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(1)), // DAI
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(0)), // WETH
      ])),
      new ethereum.EventParam('tradersPath', ethereum.Value.fromTuple([
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(0)), // tradeType
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(0)), // makerAccountIndex
        ethereum.Value.fromAddress(Address.fromString('0xd991d9E0a22a51391c25B258eeF8C1c4a392383a')), // trader
        ethereum.Value.fromBytes(ZERO_BYTES), // tradeData
      ] as ethereum.Tuple)),
    ]

    handleZapExecuted(event)
  })
})
