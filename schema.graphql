type AmmFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  totalAmmVolumeUSD: BigDecimal!

  # untracked values - less confident USD scores
  untrackedAmmVolumeUSD: BigDecimal!

  # current liquidity across all pairs
  ammLiquidityUSD: BigDecimal!

  # transactions
  transactionCount: BigInt!
  swapCount: BigInt!
}

type DyDxSoloMargin @entity {
  # contract address
  id: ID!

  # current liquidity across all markets
  supplyLiquidityUSD: BigDecimal!
  borrowLiquidityUSD: BigDecimal!

  # used for tracking transactionCount
  lastTransactionHash: Bytes!

  # totals over all-time USD
  totalBorrowVolumeUSD: BigDecimal!
  totalLiquidationVolumeUSD: BigDecimal!
  totalSupplyVolumeUSD: BigDecimal!
  totalTradeVolumeUSD: BigDecimal!
  totalVaporizationVolumeUSD: BigDecimal!

  actionCount: BigInt!
  liquidationCount: BigInt!
  tradeCount: BigInt!
  transactionCount: BigInt!
  vaporizationCount: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # Taken from dYdX
  marketId: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  transactionCount: BigInt!

  # liquidity across all pairs
  ammSwapLiquidity: BigDecimal!
  supplyLiquidity: BigDecimal!
  borrowLiquidity: BigDecimal!

  supplyLiquidityUSD: BigDecimal!
  borrowLiquidityUSD: BigDecimal!

  # derived prices
  derivedETH: BigDecimal

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  pairDayDataBase: [AmmPairDayData!]! @derivedFrom(field: "token0")
  pairDayDataQuote: [AmmPairDayData!]! @derivedFrom(field: "token1")
  pairBase: [AmmPair!]! @derivedFrom(field: "token0")
  pairQuote: [AmmPair!]! @derivedFrom(field: "token1")
}

type TokenMarketIdReverseMap @entity {
  id: ID! # marketId.toString()
  tokenAddress: String!
}

type AmmPairReverseLookup @entity {
  # token0-token1 and token1-token0
  id: ID!
  pair: AmmPair!
}

type AmmPair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal! # used for separating per pair reserves and global
  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  transactionCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges

  # derived fields
  liquidityPositions: [AmmLiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [AmmLiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  mints: [AmmMint!]! @derivedFrom(field: "pair")
  burns: [AmmBurn!]! @derivedFrom(field: "pair")
  swaps: [AmmSwap!]! @derivedFrom(field: "pair")
}

type User @entity {
  id: ID! # the user's address
  liquidityPositions: [AmmLiquidityPosition!] @derivedFrom(field: "user")
  marginAccounts: [MarginAccount!] @derivedFrom(field: "user")
  totalUsdBorrowed: BigDecimal!
  totalUsdLiquidated: BigDecimal!
  totalUsdSwapped: BigDecimal!
  totalUsdTraded: BigDecimal!
}

type AmmLiquidityPosition @entity {
  id: ID! # exchangeAddress-userAddress
  user: User!
  pair: AmmPair!
  liquidityTokenBalance: BigDecimal!
}

# saved over time for return calculations, gets created and never updated
type AmmLiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: AmmLiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: AmmPair! # reference to pair
  token0PriceUSD: BigDecimal! # snapshot of token0 price
  token1PriceUSD: BigDecimal! # snapshot of token1 price
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of AmmMint.transaction.
  # This is only used to track incomplete mints (similar for burns and swaps)
  intermitentMints: [AmmMint!]!
  intermitentBurns: [AmmBurn!]!
  intermitentSwaps: [AmmSwap!]!

  ammMints: [AmmMint!]! @derivedFrom(field: "transaction")
  ammBurns: [AmmBurn!]! @derivedFrom(field: "transaction")
  ammSwaps: [AmmSwap!]! @derivedFrom(field: "transaction")
  deposits: [Deposit!]! @derivedFrom(field: "transaction")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "transaction")
  transfers: [Transfer!]! @derivedFrom(field: "transaction")
  trades: [Trade!]! @derivedFrom(field: "transaction")
  liquidations: [Liquidation!]! @derivedFrom(field: "transaction")
  vaporizations: [Vaporization!]! @derivedFrom(field: "transaction")
}

type AmmMint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: AmmPair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type AmmBurn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: AmmPair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in ETH case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type AmmSwap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: AmmPair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt!

  # derived info
  amountUSD: BigDecimal!
}

# stores for USD calculations
type Bundle @entity {
  id: ID! # always '1'
  ethPrice: BigDecimal! # AMM price of ETH/USD
  priceOracleLastUpdatedBlockHash: String!
}

type OraclePrice @entity {
  id: ID! # marketID
  price: BigDecimal! # oracle price of ETH/USD. Updated every dYdX call
}

type TokenHourData @entity {
  id: ID! # contractAddress-hourID ; dayID hourID timestamp rounded to current day by dividing by 3600
  hourStartUnix: Int!
  token: Token!

  # Hourly Figures
  ## Hourly Volume Figures USD
  hourlyAmmSwapVolumeUSD: BigDecimal!
  hourlyBorrowVolumeUSD: BigDecimal!
  hourlyLiquidationVolumeUSD: BigDecimal!
  hourlyTradeVolumeUSD: BigDecimal!
  hourlyVaporizationVolumeUSD: BigDecimal!

  ## Hourly Volume Figures Token
  hourlyAmmSwapVolumeToken: BigDecimal!
  hourlyBorrowVolumeToken: BigDecimal!
  hourlyLiquidationVolumeToken: BigDecimal!
  hourlyTradeVolumeToken: BigDecimal!
  hourlyVaporizationVolumeToken: BigDecimal!

  ## Real-Time Closing Liquidity USD
  ammLiquidityUSD: BigDecimal!
  borrowLiquidityUSD: BigDecimal!
  supplyLiquidityUSD: BigDecimal!

  ## Real-Time Closing Liquidity Token
  ammLiquidityToken: BigDecimal!
  borrowLiquidityToken: BigDecimal!
  supplyLiquidityToken: BigDecimal!

  ## Hourly Counts
  hourlyAllTransactionCount: BigInt!
  hourlyAmmSwapCount: BigInt!
  hourlyLiquidationCount: BigInt!
  hourlyTradeCount: BigInt!
  hourlyVaporizationCount: BigInt!

  # Price stats
  ammPriceUSD: BigDecimal!
  openPriceUSD: BigDecimal!
  highPriceUSD: BigDecimal!
  lowPriceUSD: BigDecimal!
  closePriceUSD: BigDecimal!
}

type TokenDayData @entity {
  id: ID! # contractAddress-dayID; dayID is timestamp rounded to current day by dividing by 86400
  dayStartUnix: Int!
  token: Token!

  # Daily Figures
  ## Daily Volume Figures USD
  dailyAmmSwapVolumeUSD: BigDecimal!
  dailyBorrowVolumeUSD: BigDecimal!
  dailyLiquidationVolumeUSD: BigDecimal!
  dailyTradeVolumeUSD: BigDecimal!
  dailyVaporizationVolumeUSD: BigDecimal!

  ## Daily Volume Figures Token
  dailyAmmSwapVolumeToken: BigDecimal!
  dailyBorrowVolumeToken: BigDecimal!
  dailyLiquidationVolumeToken: BigDecimal!
  dailyTradeVolumeToken: BigDecimal!
  dailyVaporizationVolumeToken: BigDecimal!

  ## Real-Time Closing Liquidity USD
  ammLiquidityUSD: BigDecimal!
  borrowLiquidityUSD: BigDecimal!
  supplyLiquidityUSD: BigDecimal!

  ## Real-Time Closing Liquidity Token
  ammLiquidityToken: BigDecimal!
  borrowLiquidityToken: BigDecimal!
  supplyLiquidityToken: BigDecimal!

  ## Daily Counts
  dailyAllTransactionCount: BigInt!
  dailyAmmSwapCount: BigInt!
  dailyLiquidationCount: BigInt!
  dailyTradeCount: BigInt!
  dailyVaporizationCount: BigInt!

  # Price stats
  ammPriceUSD: BigDecimal!
  openPriceUSD: BigDecimal!
  highPriceUSD: BigDecimal!
  lowPriceUSD: BigDecimal!
  closePriceUSD: BigDecimal!
}

# Data accumulated and condensed into day stats for all of Dolomite (includes AMM)
type DolomiteDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  dayStartUnix: Int!

  # Daily Figures
  ## Daily Volume Figures USD
  dailyAmmSwapVolumeUSD: BigDecimal!
  dailyBorrowVolumeUSD: BigDecimal!
  dailyLiquidationVolumeUSD: BigDecimal!
  dailySupplyVolumeUSD: BigDecimal!
  dailyTradeVolumeUSD: BigDecimal!
  dailyVaporizationVolumeUSD: BigDecimal!

  ## Daily Volume Figures Untracked
  dailyAmmSwapVolumeUntracked: BigDecimal!

  ## Closing liquidity on the day
  ammLiquidityUSD: BigDecimal!
  borrowLiquidityUSD: BigDecimal!
  supplyLiquidityUSD: BigDecimal!

  ## Daily Counts
  dailyAmmSwapCount: BigInt!
  dailyLiquidationCount: BigInt!
  dailyTradeCount: BigInt!
  dailyVaporizationCount: BigInt!

  ## Running Total Counts
  totalAllTransactionCount: BigInt!
  totalAmmSwapCount: BigInt!
  totalLiquidationCount: BigInt!
  totalTradeCount: BigInt!
  totalVaporizationCount: BigInt!
}

type AmmPairHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTransactionCount: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type AmmPairDayData @entity {
  id: ID!
  dayStartUnix: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTransactionCount: BigInt!
}

type InterestIndex @entity {
  id: ID! # Defined as marketId
  token: Token!
  borrowIndex: BigDecimal!
  supplyIndex: BigDecimal!
  lastUpdate: BigInt!
}

type InterestRate @entity {
  id: ID! # Defined as marketId
  token: Token!
  borrowInterestRate: BigDecimal!
  supplyInterestRate: BigDecimal!
}

type MarketRiskInfo @entity {
  id: ID! # Defined as marketId
  token: Token!
  marginPremium: BigDecimal!
  liquidationRewardPremium: BigDecimal!
  isBorrowingDisabled: Boolean!
}

type MarginAccount @entity {
  id: ID! # Defined as "userAddress-accountNumber"
  user: User!
  accountNumber: BigInt!
  lastUpdatedTimestamp: BigInt! # Timestamp at which any token value was last updated
  lastUpdatedBlockNumber: BigInt!
  tokenValues: [MarginAccountTokenValue!]! @derivedFrom(field: "marginAccount")
  borrowedMarketIds: [MarginAccountTokenValue!]!
  expirationMarketIds: [MarginAccountTokenValue!]!
  hasBorrowedValue: Boolean!
  hasExpiration: Boolean!
}

type MarginAccountTokenValue @entity {
  id: ID! # Defined as "user-accountNumber-marketId"
  marginAccount: MarginAccount!
  token: Token!
  valuePar: BigDecimal! # Par value of the user's held token. Can be negative, meaning it's borrowed funds.
  expirationTimestamp: BigInt
  expiryAddress: String
}

type MarginAccountTokenValueSnapshot @entity {
  id: ID! # Defined as "user-accountNumber-marketId"
  marginAccount: MarginAccount!
  user: User!
  marketId: BigInt!
  token: Token!
  valuePar: BigDecimal! # Par value of the user's held token. Can be negative, meaning it's borrowed funds.

  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups

  valueWei: BigDecimal!
  valueWeiUSD: BigDecimal!
}

type Deposit @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!
  logIndex: BigInt!
  serialId: BigInt!

  marginAccount: MarginAccount!
  token: Token!
  from: Bytes!

  amountDeltaWei: BigDecimal!

  # derived info
  amountUSDDeltaWei: BigDecimal!
}

type Withdrawal @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!
  logIndex: BigInt!
  serialId: BigInt!

  marginAccount: MarginAccount!
  token: Token!
  to: Bytes!

  amountDeltaWei: BigDecimal!

  # derived info
  amountUSDDeltaWei: BigDecimal!
}

type Transfer @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!
  logIndex: BigInt!
  serialId: BigInt!

  fromMarginAccount: MarginAccount!
  toMarginAccount: MarginAccount!
  isSelfTransfer: Boolean!
  walletsConcatenated: String! # concatenated wallets for querying on being a sender/receiver 0x...F-0x...F

  token: Token!

  amountDeltaWei: BigDecimal!

  # derived info
  amountUSDDeltaWei: BigDecimal!
}

type Liquidation @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!
  logIndex: BigInt!
  serialId: BigInt!

  # populated from the Swap event
  solidMarginAccount: MarginAccount!
  liquidMarginAccount: MarginAccount!
  heldToken: Token!
  borrowedToken: Token!

  borrowedTokenAmountDeltaWei: BigDecimal!
  heldTokenAmountDeltaWei: BigDecimal!

  heldTokenLiquidationRewardWei: BigDecimal!

  # derived info
  debtUSDLiquidated: BigDecimal! # The amount of borrowedTokenAMount liquidated
  collateralUSDLiquidated: BigDecimal! # The amount of heldTokenAmount liquidated to recover `borrowAmount`
  collateralUSDLiquidationReward: BigDecimal! # The amount of heldTokenAmount given as a reward to the liquidator
}

type Vaporization @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!
  logIndex: BigInt!
  serialId: BigInt!

  solidMarginAccount: MarginAccount!
  vaporMarginAccount: MarginAccount!

  heldToken: Token!
  borrowedToken: Token!

  borrowedTokenAmountDeltaWei: BigDecimal!
  heldTokenAmountDeltaWei: BigDecimal!

  # derived info
  amountUSDVaporized: BigDecimal!
}

type Trade @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  logIndex: BigInt!
  serialId: BigInt!

  takerMarginAccount: MarginAccount!
  makerMarginAccount: MarginAccount # NULLABLE
  walletsConcatenated: String! # concatenated wallets for querying on being a maker/taker 0x...F-0x...F

  takerToken: Token! # the token sold (spent) by the `takerAccount`
  makerToken: Token! # the token sold (spent) by the `makerAccount`

  takerTokenDeltaWei: BigDecimal! # the `takerToken` spent by the `takerAccount`
  makerTokenDeltaWei: BigDecimal! # the `makerToken` received by the `takerAccount` (spent by the `makerAccount`)

  # derived info
  amountUSD: BigDecimal! # based on the value of the takerInputDeltaWei
}

type MarginPosition @entity {
  id: ID! # Defined as "userAddress-accountNumber"
  marginAccount: MarginAccount!

  openTimestamp: BigInt!
  openTransaction: Transaction!

  heldToken: Token
  marginDeposit: BigDecimal!
  marginDepositUSD: BigDecimal!

  # set for tracking interest accrued. This number is only set initially
  initialHeldAmountPar: BigDecimal!
  initialHeldAmountWei: BigDecimal!
  initialHeldAmountUSD: BigDecimal!
  initialHeldPrice: BigDecimal!
  initialHeldPriceUSD: BigDecimal!

  closeHeldPrice: BigDecimal
  closeHeldPriceUSD: BigDecimal
  closeHeldAmountWei: BigDecimal
  closeHeldAmountUSD: BigDecimal

  heldAmountPar: BigDecimal!

  owedToken: Token

  initialOwedAmountPar: BigDecimal!
  initialOwedAmountWei: BigDecimal!
  initialOwedAmountUSD: BigDecimal!
  initialOwedPrice: BigDecimal!
  initialOwedPriceUSD: BigDecimal!

  closeOwedPrice: BigDecimal
  closeOwedPriceUSD: BigDecimal
  closeOwedAmountWei: BigDecimal
  closeOwedAmountUSD: BigDecimal

  owedAmountPar: BigDecimal!

  status: String! # one of OPEN, CLOSED, EXPIRED, LIQUIDATED
  closeTimestamp: BigInt
  closeTransaction: Transaction
  expirationTimestamp: BigInt
}
