type AmmFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!

  # transactions
  txCount: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedETH: BigDecimal

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  pairDayDataBase: [AmmPairDayData!]! @derivedFrom(field: "token0")
  pairDayDataQuote: [AmmPairDayData!]! @derivedFrom(field: "token1")
  pairBase: [AmmPair!]! @derivedFrom(field: "token0")
  pairQuote: [AmmPair!]! @derivedFrom(field: "token1")
}

type AmmPair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal! # used for separating per pair reserves and global
  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  pairHourData: [AmmPairHourData!]! @derivedFrom(field: "pair")
  liquidityPositions: [AmmLiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [AmmLiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  mints: [AmmMint!]! @derivedFrom(field: "pair")
  burns: [AmmBurn!]! @derivedFrom(field: "pair")
  swaps: [AmmSwap!]! @derivedFrom(field: "pair")
}

type User @entity {
  id: ID! # the user's address
  liquidityPositions: [AmmLiquidityPosition!] @derivedFrom(field: "user")
  usdSwapped: BigDecimal!
}

type AmmLiquidityPosition @entity {
  id: ID!
  user: User!
  pair: AmmPair!
  liquidityTokenBalance: BigDecimal!
}

# saved over time for return calculations, gets created and never updated
type AmmLiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: AmmLiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: AmmPair! # reference to pair
  token0PriceUSD: BigDecimal! # snapshot of token0 price
  token1PriceUSD: BigDecimal! # snapshot of token1 price
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [AmmMint]!
  burns: [AmmBurn]!
  swaps: [AmmSwap]!
  deposits: [Deposit]!
  withdrawals: [Withdrawal]!
  transfers: [Transfer]!
  trades: [Trade]!
  liquidations: [Liquidation]!
  vaporizations: [Vaporization]!
}

type AmmMint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: AmmPair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type AmmBurn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: AmmPair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in ETH case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type AmmSwap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: AmmPair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt!

  # derived info
  amountUSD: BigDecimal!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}

# Data accumulated and condensed into day stats for all of Dolomite (includes AMM)
type DolomiteDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyVolumeUntracked: BigDecimal!
  dailyLiquidationVolumeUSD: BigDecimal!
  dailyVaporizationVolumeUSD: BigDecimal!

  totalVolumeETH: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal!
  totalLiquidationVolumeUSD: BigDecimal!
  totalVaporizationVolumeUSD: BigDecimal!

  txCount: BigInt!
}

type AmmPairHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: AmmPair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type AmmPairDayData @entity {
  id: ID!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

type InterestIndex @entity {
  id: ID! # Defined as marketId
  borrowIndex: BigDecimal!
  supplyIndex: BigDecimal!
  lastUpdate: BigInt!
}

type MarginAccount @entity {
  id: ID! # Defined as "user-accountId"
  user: Bytes!
  accountId: BigInt!
  lastUpdatedTimestamp: BigInt! # Timestamp at which any token value was last updated
  lastUpdatedBlockNumber: BigInt!
  tokenValues: [TokenValue]!
}

type TokenValue @entity {
  id: ID! # Defined as "user-accountId-marketId"
  marketId: BigInt!
  valuePar: BigDecimal! # Par value of the user's held token. Can be negative, meaning it's borrowed funds.
}

type Deposit @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!

  account: MarginAccount!
  token: Token!
  from: Bytes!

  amountDeltaWei: BigDecimal!

  # derived info
  amountUSDDeltaWei: BigDecimal!
}

type Withdrawal @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!

  account: MarginAccount!
  token: Token!
  to: Bytes!

  amountDeltaWei: BigDecimal!

  # derived info
  amountUSDDeltaWei: BigDecimal!
}

type Transfer @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!

  fromAccount: MarginAccount!
  toAccount: MarginAccount!
  token: Token!

  amountDeltaWei: BigDecimal!

  # derived info
  amountUSDDeltaWei: BigDecimal!
}

type Liquidation @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!

  # populated from the Swap event
  solidAccount: MarginAccount!
  liquidAccount: MarginAccount!
  suppliedToken: Token!
  borrowedToken: Token!

  borrowedTokenAmountDeltaWei: BigDecimal!
  heldTokenAmountDeltaWei: BigDecimal!
  heldTokenLiquidationRewardWei: BigDecimal!

  logIndex: BigInt!

  # derived info
  collateralUSDLiquidated: BigDecimal! # The amount of heldTokenAmount liquidated to recover `borrowAmount`
  collateralUSDLiquidationReward: BigDecimal! # The amount of heldTokenAmount given as a reward to the liquidator
}

type Vaporization @entity {
  id: ID! # Defined as "transactionHash-logIndex"
  transaction: Transaction!

  # populated from the Swap event
  solidAccount: MarginAccount!
  liquidAccount: MarginAccount!
  suppliedToken: Token!
  borrowedToken: Token!

  borrowedTokenAmountDeltaWei: BigDecimal!
  heldTokenAmountDeltaWei: BigDecimal!

  logIndex: BigInt!

  # derived info
  amountUSDVaporized: BigDecimal!
  amountUSDReward: BigDecimal!
}

type Trade @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!

  takerAccount: MarginAccount!
  makerAccount: MarginAccount # NULLABLE

  takerToken: Token! # the token sold by the `takerAccount`
  makerToken: Token! # the token sold by the `makerAccount`

  takerInputDeltaWei: BigDecimal! # the `makerToken` received by the `takerAccount`
  takerOutputDeltaWei: BigDecimal! # the `takerToken` spent by the `takerAccount`

  makerInputDeltaWei: BigDecimal # NULLABLE: the `takerToken` received by the `makerAccount`
  makerOutputDeltaWei: BigDecimal # NULLABLE: the `makerToken` spent by the `makerAccount`

  # derived info
  amountUSD: BigDecimal! # based on the value of the takerInputDeltaWei
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidation stats
  dailyLiquidationVolumeToken: BigInt!
  dailyLiquidationVolumeETH: BigInt!
  dailyLiquidationVolumeUSD: BigInt!
  dailyLiquidationCount: BigInt!

  # vaporization stats
  dailyVaporizationVolumeToken: BigInt!
  dailyVaporizationVolumeETH: BigInt!
  dailyVaporizationVolumeUSD: BigInt!
  dailyVaporizationCount: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}
